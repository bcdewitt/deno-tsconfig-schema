{
  "title": "JSON schema for the Deno compiler's TypeScript configuration file",
  "$schema": "http://json-schema.org/draft-04/schema#",
  "id": "https://json.schemastore.org/tsconfig",
  "definitions": {
    "//": {
      "explainer": "https://deno.land/manual/typescript/configuration#how-deno-uses-a-configuration-file",
      "reference": "https://www.typescriptlang.org/tsconfig",
      "reference metadata": "https://github.com/microsoft/TypeScript-Website/blob/v2/packages/tsconfig-reference/scripts/tsconfigRules.ts"
    },
    "compilerOptionsDefinition": {
      "properties": {
        "compilerOptions": {
          "type": "object",
          "description": "Instructs the Deno compiler how to compile .ts files.",
          "properties": {
            "allowJs": {
              "description": "Allow JavaScript files to be a part of your program. Use the `checkJS` option to get errors from these files.",
              "type": "boolean",
              "default": true,
              "markdownDescription": "Allow JavaScript files to be a part of your program. Use the `checkJS` option to get errors from these files.\n\nSee more:\n- https://deno.land/manual/typescript/configuration#how-deno-uses-a-configuration-file\n- https://www.typescriptlang.org/tsconfig#allowJs"
            },
            "allowUnreachableCode": {
              "description": "Disable error reporting for unreachable code.",
              "type": "boolean",
              "default": false,
              "markdownDescription": "Disable error reporting for unreachable code.\n\nSee more:\n- https://deno.land/manual/typescript/configuration#how-deno-uses-a-configuration-file\n- https://www.typescriptlang.org/tsconfig#allowUnreachableCode"
            },
            "allowUnusedLabels": {
              "description": "Disable error reporting for unused labels.",
              "type": "boolean",
              "default": false,
              "markdownDescription": "Disable error reporting for unused labels.\n\nSee more:\n- https://deno.land/manual/typescript/configuration#how-deno-uses-a-configuration-file\n- https://www.typescriptlang.org/tsconfig#allowUnusedLabels"
            },
            "checkJs": {
              "description": "Enable error reporting in type-checked JavaScript files.",
              "type": "boolean",
              "default": false,
              "markdownDescription": "Enable error reporting in type-checked JavaScript files.\n\nSee more:\n- https://deno.land/manual/typescript/configuration#how-deno-uses-a-configuration-file\n- https://www.typescriptlang.org/tsconfig#checkJs"
            },
            "experimentalDecorators": {
              "description": "Enable experimental support for TC39 stage 2 draft decorators.",
              "type": "boolean",
              "default": true,
              "markdownDescription": "Enable experimental support for TC39 stage 2 draft decorators.\n\nSee more:\n- https://deno.land/manual/typescript/configuration#how-deno-uses-a-configuration-file\n- https://www.typescriptlang.org/tsconfig#experimentalDecorators"
            },
            "jsx": {
              "description": "Specify what JSX code is generated.",
              "enum": [
                "preserve",
                "react",
                "react-jsx",
                "react-jsxdev",
                "react-native"
              ],
              "default": "react"
            },
            "jsxFactory": {
              "description": "Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'",
              "type": "string",
              "default": "React.createElement",
              "markdownDescription": "Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'\n\nSee more:\n- https://deno.land/manual/typescript/configuration#how-deno-uses-a-configuration-file\n- https://www.typescriptlang.org/tsconfig#jsxFactory"
            },
            "jsxFragmentFactory": {
              "description": "Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'.",
              "type": "string",
              "default": "React.Fragment",
              "markdownDescription": "Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'.\n\nSee more:\n- https://deno.land/manual/typescript/configuration#how-deno-uses-a-configuration-file\n- https://www.typescriptlang.org/tsconfig#jsxFragmentFactory"
            },
            "keyofStringsOnly": {
              "description": "Make keyof only return strings instead of string, numbers or symbols. Legacy option.",
              "type": "boolean",
              "default": false,
              "markdownDescription": "Make keyof only return strings instead of string, numbers or symbols. Legacy option.\n\nSee more:\n- https://deno.land/manual/typescript/configuration#how-deno-uses-a-configuration-file\n- https://www.typescriptlang.org/tsconfig#keyofStringsOnly"
            },
            "lib": {
              "description": "Specify a set of bundled library declaration files that describe the target runtime environment.",
              "type": "array",
              "default": ["deno.window"],
              "uniqueItems": true,
              "items": {
                "type": "string",
                "anyOf": [
                  {
                    "enum": [
                      "deno.window",
                      "deno.worker",
                      "deno.ns",
                      "deno.unstable",
                      "dom.asynciterable",
                      "ES5",
                      "ES6",
                      "ES2015",
                      "ES2015.Collection",
                      "ES2015.Core",
                      "ES2015.Generator",
                      "ES2015.Iterable",
                      "ES2015.Promise",
                      "ES2015.Proxy",
                      "ES2015.Reflect",
                      "ES2015.Symbol.WellKnown",
                      "ES2015.Symbol",
                      "ES2016",
                      "ES2016.Array.Include",
                      "ES2017",
                      "ES2017.Intl",
                      "ES2017.Object",
                      "ES2017.SharedMemory",
                      "ES2017.String",
                      "ES2017.TypedArrays",
                      "ES2018",
                      "ES2018.AsyncGenerator",
                      "ES2018.AsyncIterable",
                      "ES2018.Intl",
                      "ES2018.Promise",
                      "ES2018.Regexp",
                      "ES2019",
                      "ES2019.Array",
                      "ES2019.Object",
                      "ES2019.String",
                      "ES2019.Symbol",
                      "ES2020",
                      "ES2020.BigInt",
                      "ES2020.Promise",
                      "ES2020.String",
                      "ES2020.Symbol.WellKnown",
                      "ESNext",
                      "ESNext.Array",
                      "ESNext.AsyncIterable",
                      "ESNext.BigInt",
                      "ESNext.Intl",
                      "ESNext.Promise",
                      "ESNext.String",
                      "ESNext.Symbol",
                      "DOM",
                      "DOM.Iterable",
                      "ScriptHost",
                      "WebWorker",
                      "WebWorker.ImportScripts"
                    ]
                  },
                  {
                    "pattern": "^[Dd][Ee][Nn][Oo].[Ww][Ii][Nn][Dd][Oo][Ww]$"
                  },
                  {
                    "pattern": "^[Dd][Ee][Nn][Oo].[Ww][Oo][Rr][Kk][Ee][Rr]$"
                  },
                  {
                    "pattern": "^[Dd][Ee][Nn][Oo].[Nn][Ss]$"
                  },
                  {
                    "pattern": "^[Dd][Ee][Nn][Oo].[Uu][Nn][Ss][Tt][Aa][Bb][Ll][Ee]$"
                  },
                  {
                    "pattern": "^[Dd][Ee][Nn][Oo].[Aa][Ss][Yy][Nn][Cc][Ii][Tt][Ee][Rr][Aa][Bb][Ll][Ee]$"
                  },

                  {
                    "pattern": "^[Ee][Ss]5|[Ee][Ss]6|[Ee][Ss]7$"
                  },
                  {
                    "pattern": "^[Ee][Ss]2015(\\.([Cc][Oo][Ll][Ll][Ee][Cc][Tt][Ii][Oo][Nn]|[Cc][Oo][Rr][Ee]|[Gg][Ee][Nn][Ee][Rr][Aa][Tt][Oo][Rr]|[Ii][Tt][Ee][Rr][Aa][Bb][Ll][Ee]|[Pp][Rr][Oo][Mm][Ii][Ss][Ee]|[Pp][Rr][Oo][Xx][Yy]|[Rr][Ee][Ff][Ll][Ee][Cc][Tt]|[Ss][Yy][Mm][Bb][Oo][Ll].[Ww][Ee][Ll][Ll][Kk][Nn][Oo][Ww][Nn]|[Ss][Yy][Mm][Bb][Oo][Ll]))?$"
                  },
                  {
                    "pattern": "^[Ee][Ss]2016(\\.[Aa][Rr][Rr][Aa][Yy].[Ii][Nn][Cc][Ll][Uu][Dd][Ee])?$"
                  },
                  {
                    "pattern": "^[Ee][Ss]2017(\\.([Ii][Nn][Tt][Ll]|[Oo][Bb][Jj][Ee][Cc][Tt]|[Ss][Hh][Aa][Rr][Ee][Dd][Mm][Ee][Mm][Oo][Rr][Yy]|[Ss][Tt][Rr][Ii][Nn][Gg]|[Tt][Yy][Pp][Ee][Dd][Aa][Rr][Rr][Aa][Yy][Ss]))?$"
                  },
                  {
                    "pattern": "^[Ee][Ss]2018(\\.([Aa][Ss][Yy][Nn][Cc][Ii][Tt][Ee][Rr][Aa][Bb][Ll][Ee]|[Ii][Nn][Tt][Ll]|[Pp][Rr][Oo][Mm][Ii][Ss][Ee]|[Rr][Ee][Gg][Ee][Xx][Pp]))?$"
                  },
                  {
                    "pattern": "^[Ee][Ss]2019(\\.([Aa][Rr][Rr][Aa][Yy]|[Oo][Bb][Jj][Ee][Cc][Tt]|[Ss][Tt][Rr][Ii][Nn][Gg]|[Ss][Yy][Mm][Bb][Oo][Ll]))?$"
                  },
                  {
                    "pattern": "^[Ee][Ss]2020(\\.([Bb][Ii][Gg][Ii][Nn][Tt]|[Pp][Rr][Oo][Mm][Ii][Ss][Ee]|[Ss][Tt][Rr][Ii][Nn][Gg]|[Ss][Yy][Mm][Bb][Oo][Ll].[Ww][Ee][Ll][Ll][Kk][Nn][Oo][Ww][Nn]))?$"
                  },
                  {
                    "pattern": "^[Ee][Ss][Nn][Ee][Xx][Tt](\\.([Aa][Rr][Rr][Aa][Yy]|[Aa][Ss][Yy][Nn][Cc][Ii][Tt][Ee][Rr][Aa][Bb][Ll][Ee]|[Bb][Ii][Gg][Ii][Nn][Tt]|[Ii][Nn][Tt][Ll]|[Ss][Yy][Mm][Bb][Oo][Ll]))?$"
                  },
                  {
                    "pattern": "^[Dd][Oo][Mm](\\.[Ii][Tt][Ee][Rr][Aa][Bb][Ll][Ee])?$"
                  },
                  {
                    "pattern": "^[Ss][Cc][Rr][Ii][Pp][Tt][Hh][Oo][Ss][Tt]$"
                  },
                  {
                    "pattern": "^[Ww][Ee][Bb][Ww][Oo][Rr][Kk][Ee][Rr](\\.[Ii][Mm][Pp][Oo][Rr][Tt][Ss][Cc][Rr][Ii][Pp][Tt][Ss])?$"
                  }
                ]
              },
              "markdownDescription": "Specify a set of bundled library declaration files that describe the target runtime environment.\n\nSee more:\n- https://deno.land/manual/typescript/configuration#using-the-quotlibquot-property\n- https://www.typescriptlang.org/tsconfig#lib"
            },
            "noFallthroughCasesInSwitch": {
              "description": "Enable error reporting for fallthrough cases in switch statements.",
              "type": "boolean",
              "default": false,
              "markdownDescription": "Enable error reporting for fallthrough cases in switch statements.\n\nSee more:\n- https://deno.land/manual/typescript/configuration#how-deno-uses-a-configuration-file\n- https://www.typescriptlang.org/tsconfig#noFallthroughCasesInSwitch"
            },
            "noImplicitAny": {
              "description": "Enable error reporting for expressions and declarations with an implied `any` type..",
              "type": "boolean",
              "default": true,
              "markdownDescription": "Enable error reporting for expressions and declarations with an implied `any` type..\n\nSee more:\n- https://deno.land/manual/typescript/configuration#how-deno-uses-a-configuration-file\n- https://www.typescriptlang.org/tsconfig#noImplicitAny"
            },
            "noImplicitReturns": {
              "description": "Enable error reporting for codepaths that do not explicitly return in a function.",
              "type": "boolean",
              "default": false,
              "markdownDescription": "Enable error reporting for codepaths that do not explicitly return in a function.\n\nSee more:\n- https://deno.land/manual/typescript/configuration#how-deno-uses-a-configuration-file\n- https://www.typescriptlang.org/tsconfig#noImplicitReturns"
            },
            "noImplicitThis": {
              "description": "Enable error reporting when `this` is given the type `any`.",
              "type": "boolean",
              "default": true,
              "markdownDescription": "Enable error reporting when `this` is given the type `any`.\n\nSee more:\n- https://deno.land/manual/typescript/configuration#how-deno-uses-a-configuration-file\n- https://www.typescriptlang.org/tsconfig#noImplicitThis"
            },
            "noImplicitUseStrict": {
              "description": "Disable adding 'use strict' directives in emitted JavaScript files.",
              "type": "boolean",
              "default": true,
              "markdownDescription": "Disable adding 'use strict' directives in emitted JavaScript files.\n\nSee more:\n- https://deno.land/manual/typescript/configuration#how-deno-uses-a-configuration-file\n- https://www.typescriptlang.org/tsconfig#noImplicitUseStrict"
            },
            "noStrictGenericChecks": {
              "description": "Disable strict checking of generic signatures in function types.",
              "type": "boolean",
              "default": false,
              "markdownDescription": "Disable strict checking of generic signatures in function types.\n\nSee more:\n- https://deno.land/manual/typescript/configuration#how-deno-uses-a-configuration-file\n- https://www.typescriptlang.org/tsconfig#noStrictGenericChecks"
            },
            "noUnusedLocals": {
              "description": "Enable error reporting when a local variables aren't read.",
              "type": "boolean",
              "default": false,
              "markdownDescription": "Enable error reporting when a local variables aren't read.\n\nSee more:\n- https://deno.land/manual/typescript/configuration#how-deno-uses-a-configuration-file\n- https://www.typescriptlang.org/tsconfig#noUnusedLocals"
            },
            "noUnusedParameters": {
              "description": "Raise an error when a function parameter isn't read",
              "type": "boolean",
              "default": false,
              "markdownDescription": "Raise an error when a function parameter isn't read\n\nSee more:\n- https://deno.land/manual/typescript/configuration#how-deno-uses-a-configuration-file\n- https://www.typescriptlang.org/tsconfig#noUnusedParameters"
            },
            "noUncheckedIndexedAccess": {
              "description": "Add `undefined` to a type when accessed using an index.",
              "type": "boolean",
              "default": false,
              "markdownDescription": "Add `undefined` to a type when accessed using an index.\n\nSee more:\n- https://deno.land/manual/typescript/configuration#how-deno-uses-a-configuration-file\n- https://www.typescriptlang.org/tsconfig#noUncheckedIndexedAccess"
            },
            "reactNamespace": {
              "description": "Specify the object invoked for `createElement`. This only applies when targeting `react` JSX emit.",
              "type": "string",
              "default": "React",
              "markdownDescription": "Specify the object invoked for `createElement`. This only applies when targeting `react` JSX emit.\n\nSee more:\n- https://deno.land/manual/typescript/configuration#how-deno-uses-a-configuration-file\n- https://www.typescriptlang.org/tsconfig#reactNamespace"
            },
            "strict": {
              "description": "Enable all strict type checking options.",
              "type": "boolean",
              "default": true,
              "markdownDescription": "Enable all strict type checking options.\n\nSee more:\n- https://deno.land/manual/typescript/configuration#how-deno-uses-a-configuration-file\n- https://www.typescriptlang.org/tsconfig#strict"
            },
            "strictBindCallApply": {
              "description": "Check that the arguments for `bind`, `call`, and `apply` methods match the original function.",
              "type": "boolean",
              "default": true,
              "markdownDescription": "Check that the arguments for `bind`, `call`, and `apply` methods match the original function.\n\nSee more:\n- https://deno.land/manual/typescript/configuration#how-deno-uses-a-configuration-file\n- https://www.typescriptlang.org/tsconfig#strictBindCallApply"
            },
            "strictFunctionTypes": {
              "description": "When assigning functions, check to ensure parameters and the return values are subtype-compatible.",
              "type": "boolean",
              "default": true,
              "markdownDescription": "When assigning functions, check to ensure parameters and the return values are subtype-compatible.\n\nSee more:\n- https://deno.land/manual/typescript/configuration#how-deno-uses-a-configuration-file\n- https://www.typescriptlang.org/tsconfig#strictFunctionTypes"
            },
            "strictPropertyInitialization": {
              "description": "Check for class properties that are declared but not set in the constructor.",
              "type": "boolean",
              "default": true,
              "markdownDescription": "Check for class properties that are declared but not set in the constructor.\n\nSee more:\n- https://deno.land/manual/typescript/configuration#how-deno-uses-a-configuration-file\n- https://www.typescriptlang.org/tsconfig#strictPropertyInitialization"
            },
            "strictNullChecks": {
              "description": "When type checking, take into account `null` and `undefined`.",
              "type": "boolean",
              "default": true,
              "markdownDescription": "When type checking, take into account `null` and `undefined`.\n\nSee more:\n- https://deno.land/manual/typescript/configuration#how-deno-uses-a-configuration-file\n- https://www.typescriptlang.org/tsconfig#strictNullChecks"
            },
            "suppressExcessPropertyErrors": {
              "description": "Disable reporting of excess property errors during the creation of object literals.",
              "type": "boolean",
              "default": false,
              "markdownDescription": "Disable reporting of excess property errors during the creation of object literals.\n\nSee more:\n- https://deno.land/manual/typescript/configuration#how-deno-uses-a-configuration-file\n- https://www.typescriptlang.org/tsconfig#suppressExcessPropertyErrors"
            },
            "suppressImplicitAnyIndexErrors": {
              "description": "Suppress `noImplicitAny` errors when indexing objects that lack index signatures.",
              "type": "boolean",
              "default": false,
              "markdownDescription": "Suppress `noImplicitAny` errors when indexing objects that lack index signatures.\n\nSee more:\n- https://deno.land/manual/typescript/configuration#how-deno-uses-a-configuration-file\n- https://www.typescriptlang.org/tsconfig#suppressImplicitAnyIndexErrors"
            }
          }
        }
      }
    }
  },
  "type": "object",
  "allOf": [
    {
      "$ref": "#/definitions/compilerOptionsDefinition"
    }
  ]
}
